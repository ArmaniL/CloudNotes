{"version":3,"sources":["cloud.svg","components/login.js","components/note.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","state","email","password","a","console","log","this","validateEmail","data","fetch","method","headers","body","JSON","stringify","response","json","content","message","token","localStorage","setItem","window","location","reload","test","className","src","logo","alt","type","placeholder","onChange","e","setState","target","value","name","onClick","submit","React","Component","Note","Date","props","lastedited","toLocaleDateString","header","HomePage","notes","getNotes","getItem","myHeaders","Headers","append","then","status","removeItem","result","catch","error","style","paddingTop","map","note","updatedAt","App","loggedIn","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d48c54a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.2055ccc9.svg\";","import React from 'react';\r\nimport logo from '../cloud.svg';\r\nimport '../App.css'\r\nexport default class  Login extends React.Component {\r\n  \r\n\r\nconstructor(){\r\n    super()\r\n    this.state={email:\"\",password:\"\"}\r\n}\r\n\r\n\r\nasync submit(){\r\n\r\n\r\n  console.log(this.validateEmail())\r\n  \r\nif(this.validateEmail()){\r\n\r\n  const data=this.state\r\n  const response=  await fetch('http://localhost:5000',{method:'POST',headers: {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json'\r\n  },body: JSON.stringify(data)})\r\n\r\nconst content=await response.json();\r\nconsole.log(content)\r\nif(content.message){}\r\nelse{\r\nconst token=content.token\r\nlocalStorage.setItem(\"TK\",token)\r\nwindow.location.reload(false)\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n\r\nvalidateEmail(){\r\nconst email=/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\r\nconsole.log(this.state.email)\r\nreturn  email.test(this.state.email)\r\n\r\n}\r\n\r\n  render(){\r\n  \r\n    return (\r\n    <div >\r\n      <header >\r\n        <span className=\"Title\">\r\n          Cloud Notes\r\n        </span>\r\n       </header>\r\n       <img src={logo} className=\"Cloud\" alt=\"logo\" />\r\n        <form>\r\n        \r\n        <input type=\"email\" className=\"email\"placeholder=\"Email\" onChange={ (e)=>{this.setState({email:e.target.value})} }  name=\"email\"/>\r\n        <input type=\"password\" className=\"password\" placeholder=\"Password\" onChange={ (e)=>{this.setState({password:e.target.value})} }  name=\"password\"/>\r\n        </form>\r\n        <button className='submit' onClick={()=>{this.submit()}} >Login</button>\r\n        \r\n       </div>\r\n  );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../App.css'\r\nexport default class  Note extends React.Component {\r\n  \r\n\r\nconstructor(){\r\n    super()\r\n    \r\n}\r\n\r\n\r\n\r\n  render(){\r\n  \r\n    return (\r\n        <div className=\"card bg-light mb-3\">\r\n        <div className=\"card-header\">{new Date(this.props.lastedited).toLocaleDateString()}</div>\r\n        <div className=\"card-body\">\r\n    <h5 className=\"card-title\">{this.props.header}</h5>\r\n          <p className=\"card-text\">{this.props.content}</p>\r\n        </div>\r\n      </div>\r\n  );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../App.css'\r\nimport Note from './note'\r\nexport default class  HomePage extends React.Component {\r\n  \r\n\r\nconstructor(){\r\n    super()\r\n    this.state={notes:[]}\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n\r\nthis.getNotes()\r\n\r\n\r\n}\r\n\r\n\r\nasync getNotes(){\r\n//Get token\r\nconst token=localStorage.getItem(\"TK\")\r\n//if token is valid \r\nif(token ){\r\n//setup up fetch\r\n\r\nconst myHeaders = new Headers();\r\nmyHeaders.append(\"Authorization\", \"Bearer \"+token);\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\nconst requestOptions = {\r\n  method: 'GET',\r\n  headers: myHeaders\r\n};\r\n\r\nfetch(\"http://localhost:5000/notes\", requestOptions)\r\n  .then((response) => {\r\n    if(response.status===403){\r\n\r\n        localStorage.removeItem(\"TK\")\r\n    }\r\n    else {\r\n    return response.json()\r\n  }\r\n})\r\n  .then((result) => {\r\n    console.log(result)\r\n    this.setState({notes:result.result})}\r\n      \r\n      )\r\n  .catch(error => console.log('error', error));\r\n\r\n}\r\n  \r\n\r\n\r\n}\r\n\r\n\r\n\r\n  render(){\r\n  \r\n    return (\r\n    <div >\r\n      <header >\r\n        <span className=\"Title\">\r\n          Cloud Notes\r\n        </span>\r\n       </header>\r\n       \r\n<div className=\"container\"style={{paddingTop:\"5vh\"}} >\r\n\r\n    {this.state.notes.map((note)=>{return<Note header={note.header} content={note.content} lastedited={note.updatedAt} ></Note>})}\r\n</div>\r\n\r\n\r\n       </div>\r\n  );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport Loginpage from './components/login'\nimport './App.css'\nimport Homepage from './components/home'\n\nexport default  class App extends React.Component {\n\nconstructor(){\nsuper()\nthis.state={loggedIn:false}\n\n}\n\n\nrender(){\n\nif(!(localStorage.getItem(\"TK\"))){\n  return (\n   <Loginpage></Loginpage>\n  );\n  }\nelse{\n  return(\n   <Homepage></Homepage>\n  )\n}\n\n}\n\n} \n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}