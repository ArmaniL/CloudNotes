{"version":3,"sources":["cloud.svg","components/login.js","components/note.js","App.js","components/home.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","mode","useState","email","setEmail","password","setPassword","validateEmail","test","submit","a","data","fetch","method","headers","Accept","body","JSON","stringify","response","json","content","console","log","message","token","localStorage","setItem","className","src","logo","alt","type","placeholder","onChange","e","target","value","name","onClick","Note","Date","this","lastedited","toLocaleDateString","header","React","Component","Mode","App","setMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,iMCG5B,SAASC,EAAMC,GAC5B,IAAOC,EAAQD,EAARC,KAEP,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAgB,SAACJ,GAGrB,MADE,6aACUK,KAAKL,IAEbM,EAAM,uCAAG,kCAAAC,EAAA,0DACTH,EAAcJ,GADL,wBAELQ,EAAO,CAAER,QAAOE,YAFX,SAGYO,MAXf,wBAW0B,CAChCC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KATZ,cAGLQ,EAHK,gBAWWA,EAASC,OAXpB,OAWLC,EAXK,OAYXC,QAAQC,IAAIF,GACRA,EAAQG,UAEFC,EAAUJ,EAAVI,MACRC,aAAaC,QAAQ,QAASF,GAC9BxB,EAAK,IAjBI,4CAAH,qDAsBZ,OACE,6BACE,gCACE,0BAAM2B,UAAU,SAAhB,gBAEF,yBAAKC,IAAKC,IAAMF,UAAU,QAAQG,IAAI,SACtC,8BACE,2BACEC,KAAK,QACLJ,UAAU,QACVK,YAAY,QACZC,SAAU,SAACC,GACT/B,EAAS+B,EAAEC,OAAOC,QAEpBC,KAAK,UAEP,2BACEN,KAAK,WACLJ,UAAU,WACVK,YAAY,WACZC,SAAU,SAACC,GACT7B,EAAY6B,EAAEC,OAAOC,QAEvBC,KAAK,cAGT,4BACEV,UAAU,SACVW,QAAS,WACP9B,MAHJ,U,gCC3DgB+B,E,kDAGtB,aAAc,wC,0CAOZ,WAEE,OACI,yBAAKZ,UAAU,sBACf,yBAAKA,UAAU,eAAe,IAAIa,KAAKC,KAAK1C,MAAM2C,YAAYC,sBAC9D,yBAAKhB,UAAU,aACnB,wBAAIA,UAAU,cAAcc,KAAK1C,MAAM6C,QACjC,uBAAGjB,UAAU,aAAac,KAAK1C,MAAMqB,e,GAjBZyB,IAAMC,WCGnCC,GCFiCF,IAAMC,UDGnC,GADJC,EAEK,EAFLA,EAGM,EAGG,SAASC,EAAIjD,GAC1B,MAAwBE,mBAAS8C,GAAjC,mBAAO/C,EAAP,KAAaiD,EAAb,KAEA,GAAIjD,IAAS+C,OACN,IAAI/C,IAAS+C,EAClB,OAAO,kBAACjD,EAAD,CAAWE,KAAQiD,IACrB,GAAIjD,IAAS+C,EAClB,OAAO,kCENSG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAM5C,a","file":"static/js/main.f83d563f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.2055ccc9.svg\";","import React, { useState } from \"react\";\r\nimport logo from \"../cloud.svg\";\r\nimport \"../App.css\";\r\nexport default function Login(props) {\r\n  const {mode} = props;\r\n  const url = \"http://localhost:5000\";\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const validateEmail = (email) => {\r\n    const rule =\r\n      /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n    return rule.test(email);\r\n  };\r\n  const submit = async () => {\r\n    if (validateEmail(email)) {\r\n      const data = { email, password };\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const content = await response.json();\r\n      console.log(content);\r\n      if (content.message) {\r\n      } else {\r\n        const { token } = content;\r\n        localStorage.setItem(\"token\", token);\r\n        mode(2)\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <span className=\"Title\">Cloud_Notes</span>\r\n      </header>\r\n      <img src={logo} className=\"Cloud\" alt=\"logo\" />\r\n      <form>\r\n        <input\r\n          type=\"email\"\r\n          className=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={(e) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n          name=\"email\"\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          className=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={(e) => {\r\n            setPassword(e.target.value);\r\n          }}\r\n          name=\"password\"\r\n        />\r\n      </form>\r\n      <button\r\n        className=\"submit\"\r\n        onClick={() => {\r\n          submit();\r\n        }}\r\n      >\r\n        Login\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport '../App.css'\r\nexport default class  Note extends React.Component {\r\n  \r\n\r\nconstructor(){\r\n    super()\r\n    \r\n}\r\n\r\n\r\n\r\n  render(){\r\n  \r\n    return (\r\n        <div className=\"card bg-light mb-3\">\r\n        <div className=\"card-header\">{new Date(this.props.lastedited).toLocaleDateString()}</div>\r\n        <div className=\"card-body\">\r\n    <h5 className=\"card-title\">{this.props.header}</h5>\r\n          <p className=\"card-text\">{this.props.content}</p>\r\n        </div>\r\n      </div>\r\n  );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React,{useState} from \"react\";\nimport Loginpage from \"./components/login\";\nimport \"./App.css\";\nimport Homepage from \"./components/home\";\n\nconst Mode = {\n  signUp: 0,\n  loginIn: 1,\n  loggedIn: 2,\n};\n\nexport default function App(props) {\n  const [mode, setMode] = useState(Mode.loginIn);\n\n  if (mode === Mode.signUp) {\n  } else if (mode === Mode.loginIn) {\n    return <Loginpage mode = {setMode}></Loginpage>;\n  } else if (mode === Mode.loggedIn) {\n    return <p>Yo</p>;\n  }\n}\n","import React from 'react';\r\nimport '../App.css'\r\nimport Note from './note'\r\nexport default class  HomePage extends React.Component {\r\n  \r\n\r\nconstructor(){\r\n    super()\r\n    this.state={notes:[]}\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n\r\nthis.getNotes()\r\n\r\n\r\n}\r\n\r\n\r\nasync getNotes(){\r\n//Get token\r\nconst token=localStorage.getItem(\"TK\")\r\n//if token is valid \r\nif(token ){\r\n//setup up fetch\r\n\r\nconst myHeaders = new Headers();\r\nmyHeaders.append(\"Authorization\", \"Bearer \"+token);\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\nconst requestOptions = {\r\n  method: 'GET',\r\n  headers: myHeaders\r\n};\r\n\r\nfetch(\"http://localhost:5000/notes\", requestOptions)\r\n  .then((response) => {\r\n    if(response.status===403){\r\n\r\n        localStorage.removeItem(\"TK\")\r\n    }\r\n    else {\r\n    return response.json()\r\n  }\r\n})\r\n  .then((result) => {\r\n    console.log(result)\r\n    this.setState({notes:result.result})}\r\n      \r\n      )\r\n  .catch(error => console.log('error', error));\r\n\r\n}\r\n  \r\n\r\n\r\n}\r\n\r\n\r\n\r\n  render(){\r\n  \r\n    return (\r\n    <div >\r\n      <header >\r\n        <span className=\"Title\">\r\n          Cloud Notes\r\n        </span>\r\n       </header>\r\n       \r\n<div className=\"container\"style={{paddingTop:\"5vh\"}} >\r\n\r\n    {this.state.notes.map((note)=>{return<Note header={note.header} content={note.content} lastedited={note.updatedAt} ></Note>})}\r\n</div>\r\n\r\n\r\n       </div>\r\n  );\r\n    }\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}